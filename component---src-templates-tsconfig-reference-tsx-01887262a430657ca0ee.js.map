{"version":3,"sources":["webpack://typescriptlang-org/./src/templates/tsconfigReference.tsx","webpack://typescriptlang-org/../shiki-twoslash/dist/dom.js"],"names":["TSConfigReferenceTemplateComponent","props","i","createInternational","useIntl","console","log","post","data","markdownRemark","JSON","stringify","useEffect","subnavLinks","document","querySelectorAll","forEach","link","addEventListener","event","preventDefault","target","querySelector","parentElement","scrollIntoView","behavior","block","updateSidebar","currentPossibleAnchor","fromTop","window","scrollY","section","hash","offsetTop","classList","add","remove","passive","capture","setupTwoslashHovers","removeEventListener","showCategories","categories","sectionName","className","href","map","c","id","anchor","display","aria-labelledby","options","o","pageContext","root","filter","watch","typeAcq","skip","compilerOpts","includes","useState","openInfo","setOpenInfo","title","description","lang","locale","onClick","width","height","viewBox","fill","xmlns","d","stroke","intro","header","preview","dangerouslySetInnerHTML","__html","html","exports","resetHover","globalPopover","getElementById","style","getRootRect","element","nodeName","toLowerCase","getBoundingClientRect","hover","hovered","bodyRect","elemRect","message","getAttribute","position","body","top","left","tooltip","createElement","appendChild","txt","innerHTML","textContent","value","rootRect","relativeLeft","x","maxWidth","blocks","code"],"mappings":"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","file":"component---src-templates-tsconfig-reference-tsx-01887262a430657ca0ee.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport { Layout } from \"../components/layout\"\n\nimport { useIntl } from \"react-intl\";\nimport { createInternational } from \"../lib/createInternational\"\nimport { Intl } from \"../components/Intl\"\nimport { headCopy } from \"../copy/en/head-seo\"\n\nimport \"./markdown.scss\"\nimport \"./tsconfig.scss\"\n\nimport { setupTwoslashHovers } from \"shiki-twoslash/dist/dom\"\n\ntype Category = { anchor: string, display: string, options: Array<{ anchor: string, name: string }> }\n\ntype Props = {\n  pageContext: {\n    categories: Category[],\n    tsconfigMDPath: string,\n    intro: {\n      html: string\n      header: string\n      preview: string\n    },\n    locale: string\n  },\n  data: GatsbyTypes.TSConfigReferenceTemplateQuery,\n  path: string\n}\n\nconst TSConfigReferenceTemplateComponent = (props: Props) => {\n  const i = createInternational<typeof headCopy>(useIntl())\n  console.log(props)\n  const post = props.data.markdownRemark\n  if (!post) {\n    console.log(\"Could not render:\", JSON.stringify(props))\n    return <div></div>\n  }\n\n  useEffect(() => {\n    // Overrides the anchor behavior to smooth scroll instead\n    // Came from https://css-tricks.com/sticky-smooth-active-nav/\n    const subnavLinks = document.querySelectorAll<HTMLAnchorElement>(\".tsconfig .tsconfig-quick-nav-category li a\");\n\n    subnavLinks.forEach(link => {\n      link.addEventListener(\"click\", event => {\n        event.preventDefault();\n\n        let target = document.querySelector(event.target![\"hash\"]) as HTMLElement;\n        if (target) target.parentElement!.parentElement!.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n      })\n    })\n\n    // Sets the current selection\n    const updateSidebar = () => {\n      const fromTop = window.scrollY;\n      let currentPossibleAnchor: HTMLAnchorElement | undefined\n\n      // Scroll down to find the highest anchor on the screen\n      subnavLinks.forEach(link => {\n        const section = document.querySelector<HTMLDivElement>(link.hash);\n        if (!section) { return }\n        const isBelow = section.offsetTop - 100 <= fromTop\n        if (isBelow) currentPossibleAnchor = link\n      });\n\n      // Then set the active tag\n      subnavLinks.forEach(link => {\n        if (link === currentPossibleAnchor) {\n          link.classList.add(\"current\");\n        } else {\n          link.classList.remove(\"current\");\n        }\n      })\n    }\n\n    // Handles setting the scroll \n    window.addEventListener(\"scroll\", updateSidebar, { passive: true, capture: true });\n    updateSidebar()\n    setupTwoslashHovers()\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateSidebar)\n    }\n  }, [])\n\n\n  const showCategories = (categories: Category[], sectionName?: string) => {\n\n    return <div className={sectionName ? \"tsconfig-quick-nav grouped\" : \"tsconfig-quick-nav\"}>\n      {sectionName ? <h4><code><a href={`#${sectionName}`}>\"{sectionName}\"</a></code></h4> : <div />\n      }\n      {\n        categories.map(c => <div className=\"tsconfig-quick-nav-category\">\n          <h5 id={`quick-nav-${c.anchor}`}>{c.display}</h5>\n          <ol aria-labelledby={`quick-nav-${c.anchor}`}>\n            {c.options.map(o => <li><code><a href={`#${o.anchor}`}>{o.anchor}</a></code></li>)}\n          </ol>\n        </div>)\n      }\n    </div >\n  }\n  const categories = props.pageContext.categories\n\n  const root = categories.filter(c => c.anchor === \"Top Level\")\n  const watch = categories.filter(c => c.anchor === \"watchOptions\")\n  const typeAcq = categories.filter(c => c.anchor === \"typeAcquisition\")\n  const skip = [\"Top Level\", \"watchOptions\", \"typeAcquisition\"]\n  const compilerOpts = categories.filter(c => !skip.includes(c.anchor))\n\n  const [openInfo, setOpenInfo] = useState(false)\n  const toggleInfoState = () => setOpenInfo(!openInfo)\n\n\n  return (\n    <Layout title={i(\"tsconfig_title\")} description={i(\"tsconfig_description\")} lang={props.pageContext.locale}>\n\n      <div className={`tsconfig raised main-content-block markdown button ${openInfo ? \"open\" : \"closed\"}`} >\n        <a href=\"#\" onClick={toggleInfoState}>\n          <h2>\n            <svg width=\"22\" height=\"13\" viewBox=\"0 0 22 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M0.5 1L11 11.5L21.5 1\" stroke=\"black\" />\n            </svg>\n            {props.pageContext.intro.header}</h2>\n          {!openInfo && <div className=\"preview\">{props.pageContext.intro.preview}</div>}\n        </a>\n\n        {openInfo && <div className=\"content\">  <div dangerouslySetInnerHTML={{ __html: props.pageContext.intro.html }} /></div>}\n      </div>\n\n      <div className=\"tsconfig main-content-block\">\n        <h2>Compiler Options</h2>\n        {showCategories(root)}\n        {showCategories(compilerOpts, \"compilerOptions\")}\n        {showCategories(watch, \"watchOptions\")}\n        {showCategories(typeAcq, \"typeAcquisition\")}\n      </div>\n\n\n      <div dangerouslySetInnerHTML={{ __html: post.html! }} />\n\n    </Layout >\n  )\n}\n\n\nexport const pageQuery = graphql`\nquery TSConfigReferenceTemplate($tsconfigMDPath: String!) {\n\n  markdownRemark(fileAbsolutePath: {eq: $tsconfigMDPath} ) {\n    id\n    html\n    frontmatter {\n      permalink\n    }\n  }\n}\n`\n\n\nexport default (props: Props) => <Intl locale={props.pageContext.locale}><TSConfigReferenceTemplateComponent {...props} /></Intl>\n","\"use strict\";\nexports.__esModule = true;\nexports.setupTwoslashHovers = void 0;\n// Gets the position of an element relative to the whole page\nvar getAbsoluteElementPos = function (element) {\n    var bodyRect = document.body.getBoundingClientRect();\n    var elemRect = element.getBoundingClientRect();\n    var top = elemRect.top - bodyRect.top;\n    var left = elemRect.left - bodyRect.left;\n    return {\n        top: top,\n        left: left\n    };\n};\n// Hide it\nvar resetHover = function () {\n    var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n    if (globalPopover)\n        globalPopover.style.display = \"none\";\n};\n// Get it\nvar findOrCreateTooltip = function () {\n    var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n    if (!globalPopover) {\n        globalPopover = document.createElement(\"div\");\n        globalPopover.style.position = \"absolute\";\n        globalPopover.id = \"twoslash-mouse-hover-info\";\n        document.body.appendChild(globalPopover);\n    }\n    return globalPopover;\n};\nvar getRootRect = function (element) {\n    if (element.nodeName.toLowerCase() === \"pre\") {\n        return element.getBoundingClientRect();\n    }\n    return getRootRect(element.parentElement);\n};\n// Gets triggered on the spans inside the codeblocks\nvar hover = function (event) {\n    var hovered = event.target;\n    if (hovered.nodeName !== \"DATA-LSP\")\n        return resetHover();\n    var message = hovered.getAttribute(\"lsp\");\n    var position = getAbsoluteElementPos(hovered);\n    // Create or re-use the current hover div\n    var tooltip = findOrCreateTooltip();\n    // Use a textarea to un-htmlencode for presenting to the user\n    var txt = document.createElement(\"textarea\");\n    txt.innerHTML = message;\n    tooltip.textContent = txt.value;\n    // Offset it a bit from the mouse and present it at an absolute position\n    var yOffset = 20;\n    tooltip.style.display = \"block\";\n    tooltip.style.top = position.top + yOffset + \"px\";\n    tooltip.style.left = position.left + \"px\";\n    // limit the width of the tooltip to the outer container (pre)\n    var rootRect = getRootRect(hovered);\n    var relativeLeft = position.left - rootRect.x;\n    tooltip.style.maxWidth = rootRect.width - relativeLeft + \"px\";\n};\n/**\n * Creates the main mouse over popup for LSP info using the DOM API.\n * It is expected to be run inside a `useEffect` block inside your main\n * exported component in Gatsby.\n *\n * @example\n * import React, { useEffect } from \"react\"\n * import { setupTwoslashHovers } from \"shiki-twoslash/dom\";\n *\n * export default () => {\n *   // Add a the hovers\n *   useEffect(setupTwoslashHovers)\n *\n *   // Normal JSX\n *   return </>\n * }\n *\n */\nvar setupTwoslashHovers = function () {\n    var blocks = document.querySelectorAll(\".shiki.lsp .code-container code\");\n    blocks.forEach(function (code) {\n        code.addEventListener(\"mouseover\", hover);\n        code.addEventListener(\"mouseout\", resetHover);\n    });\n    return function () {\n        blocks.forEach(function (code) {\n            code.removeEventListener(\"mouseover\", hover);\n            code.removeEventListener(\"mouseout\", resetHover);\n        });\n    };\n};\nexports.setupTwoslashHovers = setupTwoslashHovers;\n"],"sourceRoot":""}